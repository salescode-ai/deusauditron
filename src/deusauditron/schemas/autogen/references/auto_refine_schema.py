# generated by datamodel-codegen:
#   filename:  references/auto_refine.schema.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class NodeRecommendation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    node: str = Field(..., description="Node identifier")
    prompt: str = Field(..., description="Recommended prompt for the node")


class IntentRecommendation(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    node: str = Field(..., description="Node identifier")
    intent_instructions: Dict[str, str] = Field(
        ..., description="Dictionary mapping intent names to instructions"
    )


class AutoRefine(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    node_recommendations: Optional[List[NodeRecommendation]] = Field(
        [], description="Array of node-specific recommendations"
    )
    global_recommendations: Optional[str] = Field(
        "", description="Global recommendations for the entire flow"
    )
    intent_recommendations: Optional[List[IntentRecommendation]] = Field(
        [], description="Array of node-specific intent recommendations"
    )
