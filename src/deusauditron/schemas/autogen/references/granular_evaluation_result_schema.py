# generated by datamodel-codegen:
#   filename:  references/granular_evaluation_result.schema.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Dict

from pydantic import BaseModel, ConfigDict, Field, field_validator

from . import evaluation_rule_result_schema


class Category(str, Enum):
	FLOW = "flow"
	Node = "node"
	Turn = "turn"
	Intent = "intent"
	# Backwards-compat aliases for capitalized access in code (e.g., Category.Flow)
	Flow = FLOW
	NodeAlias = Node
	TurnAlias = Turn
	IntentAlias = Intent


class GranularEvaluationResults(BaseModel):
	"""
	Granular evaluation results
	"""

	model_config = ConfigDict(extra="forbid")
	category: Category
	input_text: str
	node: str
	rule_results: List[evaluation_rule_result_schema.EvaluationRuleResult]
	additional_info: Optional[Dict[str, str]] = Field(default=None)

	@field_validator("category", mode="before")
	@classmethod
	def _normalize_category(cls, v):
		# Accept both capitalized (Turn/Node/Flow/Intent) and lowercase
		if isinstance(v, str):
			lower = v.lower()
			if lower in {"flow", "node", "turn", "intent"}:
				return lower
		return v
