# generated by datamodel-codegen:
#   filename:  references/model.schema.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class ReasoningEffort(Enum):
    low = "low"
    medium = "medium"
    high = "high"


class ModelConfig(BaseModel):
    name: str = Field(
        ...,
        description="The name of the model in the format 'provider/model-name' (e.g., 'groq/llama-3.3-70b-versatile', 'openai/gpt-3.5-turbo')",
    )
    temperature: float
    reasoning_effort: Optional[ReasoningEffort] = None
    response_schema: Optional[str] = Field(
        None,
        description="The schema of the response from the model. This is a JSON schema string. Presence indicates that model will return a structured response. DeusMachina will only support strict json response if this parameter is present.",
    )
    fallback_models: Optional[List[str]] = Field(
        None,
        description="The models to use as fallbacks. If the model fails, the fallback models will be used in order.",
    )
