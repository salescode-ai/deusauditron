# generated by datamodel-codegen:
#   filename:  references/evaluation_result.schema.json

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field

from . import auto_refine_schema, granular_evaluation_result_schema


class Status(Enum):
    """
    Status of the evaluation
    """

    Requested = "Requested"
    Submitted = "Submitted"
    In_Progress = "In Progress"
    Completed = "Completed"
    Error = "Error"


class EvaluationResult(BaseModel):
    """
    Complete evaluation results containing all evaluation levels
    """

    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[Status] = Field(None, description="Status of the evaluation")
    progress: Optional[float] = Field(None, description="Progress of the evaluation")
    start_time: Optional[datetime] = Field(
        None, description="UTC timestamp when evaluation started (ISO 8601 format)"
    )
    end_time: Optional[datetime] = Field(
        None, description="UTC timestamp when evaluation ended (ISO 8601 format)"
    )
    evaluated_nodes: Optional[List[str]] = Field(
        None, description="List of all node names that were evaluated"
    )
    turn_level_evaluations: Optional[
        List[granular_evaluation_result_schema.GranularEvaluationResults]
    ] = Field(None, description="Turn level evaluation results")
    node_level_evaluations: Optional[
        List[granular_evaluation_result_schema.GranularEvaluationResults]
    ] = Field(None, description="Node level evaluation results")
    flow_level_evaluations: Optional[
        List[granular_evaluation_result_schema.GranularEvaluationResults]
    ] = Field(None, description="Flow level evaluation results")
    intent_level_evaluations: Optional[
        List[granular_evaluation_result_schema.GranularEvaluationResults]
    ] = Field(None, description="Intent level evaluation results")
    auto_refinements: Optional[List[auto_refine_schema.AutoRefine]] = Field(
        None, description="Array of auto-refinement suggestions"
    )


# Ensure forward references are resolved at import time
EvaluationResult.model_rebuild()
