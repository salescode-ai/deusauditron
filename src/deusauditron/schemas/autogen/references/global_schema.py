# generated by datamodel-codegen:
#   filename:  references/global.schema.json

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel

from . import (
    data_entry_schema,
    data_source_schema,
    eval_rule_schema,
    global_code_node_schema,
    global_llm_node_for_conversation_schema,
    intent_detection_schema,
    transcriber_schema,
)


class Data(BaseModel):
    static: Union[Dict[str, Any], List[data_entry_schema.DataEntry]]
    dynamic: Optional[Dict[str, data_source_schema.DataSourceConfig]] = None


class Data3(BaseModel):
    static: Optional[Union[Dict[str, Any], List[data_entry_schema.DataEntry]]] = None
    dynamic: Dict[str, data_source_schema.DataSourceConfig]


class GlobalConfig(BaseModel):
    prompt: Optional[str] = None
    supports_vision: Optional[bool] = False
    metadata: Optional[List[Union[str, data_entry_schema.DataEntry]]] = None
    data: Optional[Union[Data, Data3]] = None
    vocabulary_replacement: Optional[data_source_schema.DataSourceConfig] = None
    intent_detection: Optional[intent_detection_schema.IntentDetectionConfig] = None
    transcriber: Optional[transcriber_schema.TranscriberConfig] = None
    code_nodes: Optional[List[global_code_node_schema.GlobalCodeNodeConfig]] = None
    llm_nodes: Optional[
        List[global_llm_node_for_conversation_schema.GlobalLLMNodeForConversation]
    ] = None
    evaluation_rules: Optional[List[eval_rule_schema.EvalRule]] = None
