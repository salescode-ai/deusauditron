# generated by datamodel-codegen:
#   filename:  workflow.schema.json

from __future__ import annotations

from typing import List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field

from .references import (
    code_node_schema,
    evaluation_schema,
    global_schema,
    llm_node_for_workflow_schema,
    redis_knowledgebase_schema,
    vector_store_node_schema,
)


class WorkflowEdge(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    from_: str = Field(..., alias="from")
    to: str


class WorkflowConfig(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["workflow"]
    name: str
    version: str
    global_: global_schema.GlobalConfig = Field(..., alias="global")
    entry_node: str
    knowledge_bases: Optional[
        List[redis_knowledgebase_schema.RedisKnowledgebaseConfig]
    ] = None
    workflow_edges: Optional[List[WorkflowEdge]] = None
    nodes: List[
        Union[
            llm_node_for_workflow_schema.LLMNodeForWorkflow,
            code_node_schema.CodeNodeConfig,
            vector_store_node_schema.VectorStoreNodeConfig,
        ]
    ] = Field(..., min_length=1)
    evaluation: Optional[evaluation_schema.EvaluationConfig] = None
